name: Run Update Agent

on:
  workflow_dispatch:
    inputs:
      notes_file:
        description: 'Notes file to update (e.g., patch-11.1.7.lua)'
        required: false
        default: 'patch-11.1.7.lua'
      scrape_url:
        description: 'URL to scrape for patch notes'
        required: false
        default: 'https://worldofwarcraft.blizzard.com/en-us/news/'

permissions:
  contents: write
  pull-requests: write

jobs:
  update-notes:
    runs-on: ubuntu-latest
    
    env: 
      NEWS_URL: ${{ vars.NEWS_URL }}
      NOTES_FILE: ${{ vars.NOTES_FILE }}
      GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
    
    steps:
      - name: Checkout dev branch
        uses: actions/checkout@v4
        with:
          ref: dev

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.x

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r .github/scripts/requirements.txt

      - name: Scrape latest patch notes
        id: scrape
        run: |
          SCRAPE_URL="${{ env.NEWS_URL || github.event.inputs.scrape_url}}"
          echo "Scraping URL: $SCRAPE_URL"
          python .github/scripts/scrape_news.py "${{ env.SCRAPE_URL }}"
          if [ -f "scraped_content.txt" ]; then
            echo "scraped=true" >> $GITHUB_OUTPUT
          else
            echo "scraped=false" >> $GITHUB_OUTPUT
            echo "::error::Scraping failed, scraped_content.txt not found."
            exit 1
          fi

      - name: Generate formatted notes with LLM
        if: steps.scrape.outputs.scraped == 'true'
        id: llm_generate
        run: |
          NOTES_FILE_PATH="PatchNotesDelivered/notes/${{ env.NOTES_FILE || github.event.inputs.notes_file }}"
          echo "Running Update Agent"
          python .github/scripts/generate_patch_notes.py scraped_content.txt "$NOTES_FILE_PATH"
          echo "llm_run=true" >> $GITHUB_OUTPUT
          echo "Update Agent finished"

      - name: Run build check and update build number
        id: update_version_build
        run: |
          NOTES_FILE="${{ github.event.inputs.notes_file }}"
          echo "Updating patch notes version and build"
          python .github/scripts/update_patch_notes.py "$NOTES_FILE"
          echo "Patch notes version and build updated"

      - name: Commit updated build number
        if: steps.update_version_build.outputs.updated == 'true'
        run: |
          NOTES="${{ github.event.inputs.notes || env.NOTES_FILE }}"
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add PatchNotesDelivered/notes/"$NOTES"
          git commit -m "Update $NOTES to latest build"

      - name: Check for existing Open Pull Request
        id: check_existing_pr
        if: steps.update_version_build.outputs.updated == 'true'
        run: |
          BRANCH_NAME="updates/auto-patch-notes-${{ steps.update_version_build.outputs.branch_name }}"
          # Check for OPEN pull requests originating from this branch
          if gh pr list --head "$BRANCH_NAME" --state open --json number --limit 1 | grep -q '[0-9]'; then
            echo "An open PR for branch $BRANCH_NAME already exists."
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "No open PR for branch $BRANCH_NAME found."
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Pull Request
        if: 
          steps.llm_generate.outputs.llm_run == 'true' &&
          steps.update_version_build.outputs.updated == 'true' &&
          steps.check_existing_pr.exists == 'false'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "Auto update patch notes file"
          title: "ðŸ¤– Automated Patch Notes Update"
          body: |
            This PR was automatically generated by the Run Update Agent workflow.

            - Scraped notes from: `${{ github.event.inputs.scrape_url }}`
            - Updated game version/build to: `${{ steps.update_version_build.outputs.branch_name }}`
            - LLM was used to format and update the patch notes.

            Please review the changes carefully.
          branch: "updates/auto-patch-notes-${{ steps.update_version_build.outputs.branch_name }}"
          base: dev
          delete-branch: true

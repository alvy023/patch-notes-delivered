name: Run Update Agent

on:
  workflow_dispatch:
    inputs:
      notes_file:
        description: 'Notes file to update (optional)'
        required: false
        default: 'patch-11.2.0.lua'
      scrape_url:
        description: 'URL to scrape for patch notes'
        required: false
        default: 'https://worldofwarcraft.blizzard.com/en-us/news/24223774/'
      commit_news:
        description: 'Commit news to the branch'
        required: false
        default: 'false'

  # Scheduled trigger - runs daily at 1400 UTC -> 10 AM EST
  schedule:
    - cron: '0 14 * * *'

permissions:
  contents: write
  pull-requests: write

jobs:
  update-notes:
    runs-on: ubuntu-latest
    
    env: 
      NEWS_URL: ${{ vars.NEWS_URL }}
      NOTES_FILE: ${{ vars.NOTES_FILE }}
      GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
      COMMIT_NEWS: 'false'
    
    steps:
      - name: Checkout dev branch
        uses: actions/checkout@v4
        with:
          ref: dev

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.x

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r .github/scripts/requirements.txt

      - name: Scrape latest patch notes
        id: scrape
        run: |
          SCRAPE_URL="${{ github.event.inputs.scrape_url || env.NEWS_URL }}"
          COMMIT="${{ github.event.inputs.commit_news || env.COMMIT_NEWS }}"
          echo "Scraping URL: $SCRAPE_URL"
          python .github/scripts/scrape_news.py "$SCRAPE_URL" "$COMMIT"
          if [ -f "scraped_content.txt" ]; then
            echo "scraped=true" >> $GITHUB_OUTPUT
          else
            echo "scraped=false" >> $GITHUB_OUTPUT
            echo "::error::Scraping failed, scraped_content.txt not found."
            exit 1
          fi

      - name: Generate formatted notes with LLM
        if: steps.scrape.outputs.scraped == 'true'
        id: llm_generate
        run: |
          NOTES="PatchNotesDelivered/notes/${{ github.event.inputs.notes_file || env.NOTES_FILE }}"
          echo "Running Update Agent"
          python .github/scripts/update_patch_notes_agent.py scraped_content.txt "$NOTES"
          if [ -f "scraped_content.txt" ]; then
            rm -f "scraped_content.txt"
          fi
          if [ -f "scraped_data.json" ]; then
            rm -f "scraped_data.json"
          fi

      - name: Run build check and update build number
        if: steps.llm_generate.outputs.updated == 'true'
        id: update_version_build_hotfix
        run: |
          NOTES="${{ github.event.inputs.notes_file || env.NOTES_FILE }}"
          echo "Running build and hotfix version check"
          python .github/scripts/update_patch_notes.py "$NOTES"
          echo "Build and hotfix version check completed"

      - name: Commit changes
        if: steps.update_version_build_hotfix.outputs.updated == 'true'
        id: commit_changes
        run: |
          NOTES="PatchNotesDelivered/notes/${{ github.event.inputs.notes_file || env.NOTES_FILE }}"
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add "$NOTES"
          git commit -m "Update $NOTES to latest build or patch notes text"
          echo "changed=true" >> $GITHUB_OUTPUT

      - name: Check for existing Open Pull Request
        id: check_existing_pr
        if: steps.commit_changes.outputs.changed == 'true'
        run: |
          BRANCH_NAME="updates/auto-patch-notes-${{ steps.update_version_build_hotfix.outputs.branch_name }}"
          # Check for OPEN pull requests originating from this branch
          if gh pr list --head "$BRANCH_NAME" --state open --json number --limit 1 | grep -q '[0-9]'; then
            echo "An open PR for branch $BRANCH_NAME already exists."
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "No open PR for branch $BRANCH_NAME found."
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Pull Request
        if: steps.check_existing_pr.outputs.exists == 'false'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "Auto update patch notes file"
          title: "ðŸ¤– Automated Patch Notes Update"
          body: |
            This PR was automatically generated by the Run Update Agent workflow.

            - Scraped notes from: `${{ github.event.inputs.scrape_url || env.NEWS_URL }}`
            - Updated game version/build to: `${{ steps.update_version_build_hotfix.outputs.branch_name }}`
            - LLM was used to format and update the patch notes.

            Please review the changes carefully.
          branch: "updates/auto-patch-notes-${{ steps.update_version_build_hotfix.outputs.branch_name }}"
          base: dev

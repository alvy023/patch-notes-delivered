name: Create Release

on:
  workflow_dispatch:

jobs:
  release:
    name: Package and Release Addon
    runs-on: ubuntu-latest

    env:
      ADDON_VERSION: ${{ vars.ADDON_VERSION }}
      ADDON_NAME: PatchNotesDelivered
      NOTES_FILE: ${{ vars.NOTES_FILE }}

    steps:
      - name: Checkout main
        uses: actions/checkout@v4
        with:
          ref: main
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.x

      - name: Get latest merged dev to main PR number
        id: find_pr
        run: |
          PR_NUMBER=$(gh pr list --base main --head dev --state merged --json number,mergedAt | jq 'sort_by(.mergedAt) | reverse | .[0].number')
          echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get PR commit messages
        id: pr_commits
        run: |
          if [ -n "${{ env.PR_NUMBER }}" ]; then
            COMMIT_ID=$(gh pr view "${{ env.PR_NUMBER }}" --json mergeCommit --jq '.mergeCommit.oid')
            COMMITS=$(gh api repos/${GITHUB_REPOSITORY}/commits/${COMMIT_ID} --jq .commit.message | sed '/^$/d')
            echo "COMMITS<<EOF" >> $GITHUB_ENV
            echo "$COMMITS" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          else
            echo "COMMITS=" >> $GITHUB_ENV
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Write commit messages to file
        run: |
          echo "${{ env.COMMITS }}" > commits.txt

      - name: Create Release
        id: create_release
        run: |
          echo "Fetching local game version/build"
          python .github/scripts/create_retail_release.py "$NOTES_FILE" commits.txt
          python .github/scripts/create_retail_release.py "$NOTES_FILE" commits.txt

      - name: Set full version string
        id: versioning
        run: |
          RELEASE_TAG="release-v${ADDON_VERSION}-retail-${{ steps.create_release.outputs.local_game_version_build_hf }}"
          echo "release_tag=${RELEASE_TAG}" >> $GITHUB_OUTPUT
        shell: bash

      - name: Zip addon folder
        run: |
          mkdir dist
          zip -r "dist/${{ env.ADDON_NAME }}-${{ steps.versioning.outputs.release_tag }}.zip" "${{ env.ADDON_NAME }}/"

      - name: Create Git tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag "${{ steps.versioning.outputs.release_tag }}"
          git push origin "${{ steps.versioning.outputs.release_tag }}"

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2.2.2
        with:
          tag_name: ${{ steps.versioning.outputs.release_tag }}
          name: ${{ steps.versioning.outputs.release_tag }}
          body_path: ${{ steps.create_release.outputs.release_notes_path }}
          files: dist/${{ env.ADDON_NAME }}-${{ steps.versioning.outputs.release_tag }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

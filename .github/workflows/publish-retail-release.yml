name: Publish Retail Release

on:
  workflow_dispatch:
    inputs:
      upload_curseforge:
        description: 'Upload to CurseForge?'
        required: false
        default: 'false'
        type: boolean
      upload_wowup:
        description: 'Upload to WowUp?'
        required: false
        default: 'false'
        type: boolean

jobs:
  publish:
    name: Publish Addon to CurseForge and WowUp
    runs-on: ubuntu-latest

    env:
      ADDON_NAME: PatchNotesDelivered

    steps:
      - name: Checkout main
        uses: actions/checkout@v4
        with:
          ref: main
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.x

      - name: Download latest release items from GitHub Releases
        id: get_release_items
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          release_asset_name=$(gh release view --json assets --jq ".assets[].name")
          if [ -z "$release_asset_name" ]; then
            echo "No release asset found in latest release."
            exit 1
          fi
          gh release download --pattern "$release_asset_name" --dir dist
          gh release view --json body --jq ".body" > RELEASE_NOTES.md
          echo "release_asset_name=${release_asset_name}" >> $GITHUB_OUTPUT

      # CURSEFORGE UPLOAD (Curseforge API)
      - name: Upload to CurseForge
        if: ${{ github.event.inputs.upload_curseforge == 'true' }}
        env:
          CURSEFORGE_API_TOKEN: ${{ secrets.CURSEFORGE_API_TOKEN }}
          CURSEFORGE_ADDON_ID: ${{ secrets.CURSEFORGE_ADDON_ID }}
        run: |
          # Prepare metadata
          RELEASE_FILENAME="${{ steps.get_release_items.outputs.release_asset_name }}"
          DISPLAY_NAME=$(echo "$RELEASE_FILENAME" | sed -e 's/\.zip$//')
          # CHANGELOG=$(jq --slurp --raw-input '.' < "RELEASE_NOTES.md")
          CHANGELOG="# Test Change Log\n\nThis is a test changelog."
          PATCH_VERSION=$(grep -oP 'Patch -\[ \*\*\K[0-9]+\.[0-9]+\.[0-9]+(?=\*\* \]-)' RELEASE_NOTES.md | head -n1)
          GAME_VERSION_ID=$(curl -s -H "x-api-token: ${CURSEFORGE_API_TOKEN}" "https://wow.curseforge.com/api/game/versions" \
            | jq ".[] | select(.name==\"$PATCH_VERSION\") | .id" | head -n1)
          
          if [ -z "$GAME_VERSION_ID" ]; then
            echo "Could not find CurseForge game version ID for $PATCH_VERSION"
            exit 1
          fi

          METADATA_JSON=$(cat <<-EOF
          {
            "displayName": "$DISPLAY_NAME",
            "gameVersions": [$GAME_VERSION_ID],
            "releaseType": "release",
            "changelog": $CHANGELOG,
            "changelogType": "text"
          }
          EOF
          )

          echo "METADATA_JSON: $METADATA_JSON"

          # Build and send the curl request
          response=$(echo "$METADATA_JSON" | curl -sS --retry 3 --retry-delay 10 \
            -H "x-api-token: ${CURSEFORGE_API_TOKEN}" \
            -F "'metadata'=<-" \
            -F "file=@dist/$RELEASE_FILENAME" \
            "https://wow.curseforge.com/api/projects/${CURSEFORGE_ADDON_ID}/upload-file"
          )
          echo "Response: $response"
          if echo "$response" | jq -e '.error, .errorMessage' > /dev/null; then
            echo "[ERROR] CurseForge:"
            echo "$response" | jq '.'
            exit 1
          fi

      # WOWUP UPLOAD (WowUp CLI)
      - name: Upload to WowUp (Wago API)
        if: ${{ github.event.inputs.upload_wowup == 'true' }}
        env:
          WOWUP_API_TOKEN: ${{ secrets.WOWUP_API_TOKEN }}
          WOWUP_ADDON_ID: ${{ secrets.WOWUP_ADDON_ID }}
        run: |
          # Prepare metadata
          RELEASE_FILENAME="${{ steps.get_release_items.outputs.release_asset_name }}"
          ## Remove prefix and suffix
          RELEASE_LABEL=$(echo "$RELEASE_FILENAME" | sed -e 's/^PatchNotesDelivered-//' -e 's/\.zip$//')
          CHANGELOG=$(cat RELEASE_NOTES.md)
          SUPPORTED_RETAIL_PATCH=$(grep -oP 'Patch -\[ \*\*\K[0-9]+\.[0-9]+\.[0-9]+(?=\*\* \]-)' RELEASE_NOTES.md | head -n1)
          
          echo "RELEASE_LABEL: $RELEASE_LABEL"
          echo "SUPPORTED_RETAIL_PATCH: $SUPPORTED_RETAIL_PATCH"
          echo "CHANGELOG: $CHANGELOG"
          ls -l dist/
          
          METADATA=$(jq -n \
            --arg label "$RELEASE_LABEL" \
            --arg stability "stable" \
            --arg changelog "$CHANGELOG" \
            --arg patch "$SUPPORTED_RETAIL_PATCH" \
            '{label: $label, stability: $stability, changelog: $changelog, supported_retail_patch: $patch}')
          echo "METADATA: $METADATA"
          
          # Build and send the curl request
          response=$(curl -f -X POST \
            -F "metadata=$METADATA" \
            -F "file=@dist/$RELEASE_FILENAME" \
            -H "authorization: Bearer $WOWUP_API_TOKEN" \
            -H "accept: application/json" \
            "https://addons.wago.io/api/projects/$WOWUP_ADDON_ID/version")

          # Check for an error in the response
          if echo "$response" | jq -e '.error, .errorMessage' > /dev/null; then
            echo "[ERROR] WowUp:"
            echo "$response" | jq '.'
            exit 1
          fi
